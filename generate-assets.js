#!/usr/bin/env bun
// Asset generation script for the static site generator
// This script helps prepare asset directories and can generate placeholder images for development

const fs = require('fs');
const path = require('path');

// Configuration
const ASSETS_CONFIG = {
  // Source asset directories to create
  directories: [
    'src/public/assets/images',
    'src/public/assets/fonts',
    'src/public/assets/js',
    'src/public/assets/css',
    // Project-specific directories
    'src/public/assets/images/deconstruct-site',
    'src/public/assets/images/projects'
  ],
  
  // Placeholder images to generate (only if --placeholders flag is used)
  placeholders: {
    // Simple 1x1 pixel GIF (transparent)
    transparentGif: Buffer.from([
      0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x44, 0x00, 0x3b
    ]),
    
    // Simple 1x1 pixel GIF (black)
    blackGif: Buffer.from([
      0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x44, 0x00, 0x3b
    ]),
    
    // Images to generate
    files: [
      // Article images
      {
        path: 'src/public/assets/images/deconstruct-site/terminal-1.gif',
        type: 'blackGif'
      },
      {
        path: 'src/public/assets/images/deconstruct-site/terminal-2.gif',
        type: 'blackGif'
      },
      {
        path: 'src/public/assets/images/deconstruct-site/ascii.jpg',
        type: 'blackGif'
      },
      {
        path: 'src/public/assets/images/deconstruct-site/moodboard-2.jpg',
        type: 'blackGif'
      },
      {
        path: 'src/public/assets/images/deconstruct-site/moodboard-3.jpg',
        type: 'blackGif'
      },
      {
        path: 'src/public/assets/images/deconstruct-site/moodboard-4.jpg',
        type: 'blackGif'
      },
      {
        path: 'src/public/assets/images/deconstruct-site/moodboard-5.gif',
        type: 'blackGif'
      },
      {
        path: 'src/public/assets/images/deconstruct-site/moodboard-6.gif',
        type: 'blackGif'
      },
      // Add more placeholder images here as needed
    ]
  },
  
  // Sample favicon 
  favicon: {
    path: 'src/public/favicon.ico',
    data: Buffer.from([
      0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x68, 0x03,
      0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ])
  }
};

// Check command line arguments
const shouldGeneratePlaceholders = process.argv.includes('--placeholders');
const shouldGenerateFavicon = process.argv.includes('--favicon') || shouldGeneratePlaceholders;

// Create asset directories
console.log('üìÅ Creating asset directories...');
let dirCount = 0;

for (const dir of ASSETS_CONFIG.directories) {
  try {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`‚úÖ Created directory: ${dir}`);
      dirCount++;
    } else {
      console.log(`‚ÑπÔ∏è Directory already exists: ${dir}`);
    }
  } catch (error) {
    console.error(`‚ùå Error creating directory ${dir}:`, error);
  }
}

console.log(`üìÅ Created ${dirCount} directories (${ASSETS_CONFIG.directories.length - dirCount} already existed)`);

// Generate placeholder images if requested
if (shouldGeneratePlaceholders) {
  console.log('\nüñºÔ∏è Generating placeholder images...');
  let successCount = 0;
  
  for (const image of ASSETS_CONFIG.placeholders.files) {
    try {
      // Get the image data from the type
      const imageData = ASSETS_CONFIG.placeholders[image.type];
      if (!imageData) {
        console.error(`‚ùå Unknown placeholder type: ${image.type}`);
        continue;
      }
      
      // Make sure the directory exists
      const dir = path.dirname(image.path);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      // Write the file
      fs.writeFileSync(image.path, imageData);
      console.log(`‚úÖ Created: ${image.path}`);
      successCount++;
    } catch (error) {
      console.error(`‚ùå Error creating ${image.path}:`, error);
    }
  }
  
  console.log(`‚úÖ Generated ${successCount}/${ASSETS_CONFIG.placeholders.files.length} placeholder images`);
}

// Generate favicon
if (shouldGenerateFavicon) {
  console.log('\nüî∂ Generating favicon...');
  
  try {
    // Make sure the directory exists
    const dir = path.dirname(ASSETS_CONFIG.favicon.path);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    // Write the file
    fs.writeFileSync(ASSETS_CONFIG.favicon.path, ASSETS_CONFIG.favicon.data);
    console.log(`‚úÖ Created favicon at: ${ASSETS_CONFIG.favicon.path}`);
  } catch (error) {
    console.error(`‚ùå Error creating favicon:`, error);
  }
}

console.log('\n‚úÖ Asset setup complete!');
console.log('You can now build the site with: bun dev or bun build:prod');
console.log('To generate placeholder images, run: bun generate-assets --placeholders'); 